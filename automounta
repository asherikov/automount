#! /bin/sh 
# -x

# Copyright (c) 2014    Alexander Sherikov
# Copyright (c) 2012-2013 Slawomir Wojciech Wojtczak (vermaden)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# PROVIDE: automounta
#

. /etc/rc.subr

name="automounta"
rcvar=`set_rcvar`

command="/usr/bin/true"
extra_commands="usage attach detach"

start_cmd="${name}_start"
stop_cmd="${name}_stop"
usage_cmd="${name}_usage"
attach_cmd="${name}_attach"
detach_cmd="${name}_detach"



##############################################################################
# Configuration
##############################################################################
load_rc_config $name

if [ -f /usr/local/etc/${name}.conf ]
then
    . /usr/local/etc/${name}.conf
fi


: ${MNTPREFIX="/media"}                 # mount prefix
: ${ENCODING="en_US.ISO8859-1"}         # US/Canada
: ${CODEPAGE="cp437"}                   # US/Canada
: ${ATIME="YES"}                        # when NO mount with noatime
: ${REMOVEDIRS="NO"}                    # remove empty dirs under ${MNTPREFIX}
: ${USER=""}                            # which user to use for popup
: ${TIMEOUT="8"}                        # stop waiting for device after that time
: ${DELAY="1"}                          # check for the device node that often
: ${SUPPORTED_DEVICE_TYPES="da mmcsd ugen"}  # all other devices are ignored
: ${STOP_DEVICES="NO"}                  # stop devices using camcontrol (no idea if it makes sence)
: ${BLACKLIST=""}                       # blacklisted device nodes


#: ${KNOWN_DEVICES="BACKUP"}
#: ${BACKUP_ID="666-666-666"}
##: ${BACKUP_MOUNT_POINT="$MNTPREFIX/backup/"}
##: ${BACKUP_BLACKLISTED="NO"}
##: ${BACKUP_MOUNT_PARAMETERS=""}


# supported filesystems
# FAT must be before NTFS section because: newfs_msdos -O NTFS -L NTFS
SUPPORTED_FILESYSTEMS="FFS FAT NTFS EXT2 EXT3 MTP"

FAT_ID="FAT"
FAT_MOUNT_TOOL="mount_msdosfs"
FAT_MOUNT_PARAMETERS="-o large -o longnames -m 644 -M 755 -D ${CODEPAGE} -L ${ENCODING}"
FAT_CHECK_TOOL="fsck_msdosfs -C -y"

FFS_ID="Unix Fast File system"
FFS_MOUNT_TOOL="mount"
FFS_MOUNT_PARAMETERS="-t ufs"
FFS_CHECK_TOOL="fsck_ufs -C -y"

NTFS_ID="NTFS"
NTFS_MOUNT_TOOL="ntfs-3g"
NTFS_MOUNT_PARAMETERS="-o recover -o remove_hiberfile"
NTFS_CHECK_TOOL=""

EXT2_ID="ext2"
EXT2_MOUNT_TOOL="mount"
EXT2_MOUNT_PARAMETERS="-t ext2fs"
EXT2_CHECK_TOOL="e2fsck -y"

EXT3_ID="ext3"
EXT3_MOUNT_TOOL="mount"
EXT3_MOUNT_PARAMETERS="-t ext2fs"
EXT3_CHECK_TOOL="e2fsck -y"

EXT4_ID="ext4"
EXT4_MOUNT_TOOL="ext4fuse"
EXT4_MOUNT_PARAMETERS=""
EXT4_CHECK_TOOL="e2fsck -y"

MTP_ID="MTP is a handled separately, this ID is not used."
MTP_MOUNT_TOOL="simple-mtpfs"
MTP_MOUNT_PARAMETERS="-o allow_other"
MTP_CHECK_TOOL=""


##############################################################################
# Auxiliary functions
##############################################################################

__create_mount_point()
{ # 1=DEV
    mkdir -p ${1}
    if [ "${USER}" != 0 ]
    then
        chown ${USER}:$( id -g -n ${USER} ) ${1}
    fi
}


__remove_dir() 
{ # 1=TARGET
    if [ "${REMOVEDIRS}" = YES ]
    then
        find "${1}" -type d -empty -maxdepth 1 -exec rm -d {} '+' 2> /dev/null
    fi
}


__check_already_mounted() 
{ # 1=(-d|-m) 2=(DEV|MNT)
    local MOUNT="$( mount )"
    case ${1} in
        (-d)
            if echo "${MOUNT}" | grep -q "^${2} on "
            then
                local MOUNT="$( echo "${MOUNT}" | grep "^${2} on " | cut -d ' ' -f 3-255 | cut -d '(' -f 1 | sed s/.$// )"
                warn "${DEV}: already mounted on '${MOUNT}' mount point"
                exit 0
            fi
            ;;
        (-m)
            if echo "${MOUNT}" | grep -q " on ${2} "
            then
                local DEVICE="$( echo "${MOUNT}" | grep " on ${2} " | awk '{print $1}' )"
                warn "${DEVICE}: already mounted on '${2}' mount point"
                exit 0
            fi
            ;;
    esac
}


__umount_device ()
{
    if (umount "${MOUNT_POINT}")
    then
        __remove_dir "${MOUNT_POINT}"

        if [ "${STOP_DEVICES}" = "YES" ]
        then
            CAMCONTROL_DEVICE=`echo "${DEVICE}" | grep -o "da[0-9]"`
            if (test "${CAMCONTROL_DEVICE}")
            then
                camcontrol stop ${CAMCONTROL_DEVICE}
            fi
        fi
    else
        warn "Could not umount '${DEVICE}' at '${MOUNT_POINT}'."
    fi
}


__umount_all()
{
    MOUNTED_DEVICES=""

    for DEVICE_TYPE in ${SUPPORTED_DEVICE_TYPES}
    do
        if (test "${MOUNTED_DEVICES}")
        then
            #MOUNTED_DEVICES_TMP=`mount | grep ${MNTPREFIX} | grep "/dev/${DEVICE_TYPE}[0-9]\+"`
            MOUNTED_DEVICES_TMP=`mount | grep ${MNTPREFIX} | grep "/${DEVICE_TYPE}[0-9.]\+"`
            MOUNTED_DEVICES=`echo -e "${MOUNTED_DEVICES}\n${MOUNTED_DEVICES_TMP}"`
        else
            #MOUNTED_DEVICES=`mount | grep ${MNTPREFIX} | grep "/dev/${DEVICE_TYPE}[0-9]\+"`
            MOUNTED_DEVICES=`mount | grep ${MNTPREFIX} | grep "/${DEVICE_TYPE}[0-9.]\+"`
        fi
    done


    echo "${MOUNTED_DEVICES}" | while read MOUNTED_DEVICE;
    do
        if (test "${MOUNTED_DEVICE}")
        then
            DEVICE=`echo ${MOUNTED_DEVICE} | cut -f 1 -d " " | sed 's|/dev/||'`
            MOUNT_POINT=`echo ${MOUNTED_DEVICE} | cut -f 3 -d " "`

            if (test "${MOUNT_POINT}")
            then
                __umount_device
            fi
        fi
    done
}


__remove_empty_dirs()
{
    if [ "${REMOVEDIRS}" = YES ]
    then
        MOUNT_POINTS=""

        for DEVICE_TYPE in ${SUPPORTED_DEVICE_TYPES}
        do
            if (test "${MOUNT_POINTS}")
            then
                MOUNT_POINTS_TMP=`ls -1 ${MNTPREFIX} | grep "${DEVICE_TYPE}[0-9]\+"`
                MOUNT_POINTS=`echo -e "${MOUNT_POINTS}\n${MOUNT_POINTS_TMP}"`
            else
                MOUNT_POINTS=`ls -1 ${MNTPREFIX} | grep "${DEVICE_TYPE}[0-9]\+"`
            fi
        done


        echo "${MOUNT_POINTS}" | while read MOUNT_POINT;
        do
            if (test "${MOUNT_POINT}")
            then
                MOUNT_POINT="${MNTPREFIX}/${MOUNT_POINT}"
                MOUNTED=`mount | grep "${MOUNT_POINT}"`

                if !(test "${MOUNTED}")
                then
                    __remove_dir "${MOUNT_POINT}"
                fi
            fi
        done
    fi
}


__wait_for_device() { # 1=DEV
    local COUNT=0
    while ! head -c 1 ${1} 1> /dev/null 2> /dev/null
    do
        sleep ${DELAY}
        local COUNT=$( echo ${COUNT} + ${DELAY} | bc -l )
        if ! echo ${COUNT} | grep -q -E '^[0-9]'
        then
            local COUNT=0${COUNT}
        fi
        local COUNT_INT=$( echo ${COUNT} | cut -d '.' -f 1 )
        if [ ${COUNT_INT} -gt ${TIMEOUT} ]
        then
            warn "Device '${1}' is not available"
            exit 0
        fi
    done
}



##############################################################################
# Primary functions
##############################################################################

automounta_usage() 
{
    cat << EOF
Parameters can be specified in /usr/local/etc/${name}.conf
EOF
    exit 0
}


automounta_start()
{
    __remove_empty_dirs
    warn "${name} started."
}


automounta_stop()
{
    __umount_all
    __remove_empty_dirs
    warn "${name} stopped"
}


automounta_attach()
{
    DEVICE=${ARGUMENT}
    DEVICE_PATH=/dev/${DEVICE}
    MOUNT_POINT=${MNTPREFIX}/${DEVICE}

    
    if !(test "${DEVICE}")
    then 
        warn "Device is not specified."
        exit 0
    fi


    for BLACKLISTED_DEVICE in ${BLACKLIST}
    do
        if [ ${DEVICE} = "${BLACKLISTED_DEVICE}" ]
        then
            warn "Device '${DEVICE}' blocked by BLACKLIST option"
            exit 0
        fi
    done


    case ${DEVICE} in 
        ugen[0-9]\.[0-9])
            # TODO I couldn't find a clean way to detect which device is
            # actually was attached and if it is mounted. So I simply mount all
            # devices if there are any. This may lead to problems, when many
            # devices are attached.

            sleep ${DELAY}
            sleep ${DELAY}
            sleep ${DELAY}


            MTP_LIST=`simple-mtpfs -l`
            if !(test "${MTP_LIST}")
            then
                warn "No MTP devices found."
                exit 0;
            fi


            __check_already_mounted -m ${MOUNT_POINT}


            MOUNT_TOOL=${MTP_MOUNT_TOOL}
            MOUNT_PARAMETERS=${MTP_MOUNT_PARAMETERS}
            FILESYSTEM_ID="MTP"
            

            if !(test "${MOUNT_TOOL}")
            then
                warn "Mount tool is not specified for MTP."
                exit 0;
            fi


            if (test "${USER}")
            then
                GID=`id -u ${USER}`
                MOUNT_PARAMETERS="${MOUNT_PARAMETERS} -o gid=${GID}"
            fi
            
            
            __create_mount_point ${MOUNT_POINT}

            if (${MOUNT_TOOL} ${MOUNT_PARAMETERS} ${MOUNT_POINT})
            then
                warn "Device '${DEVICE}' mounted at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
            else
                warn "Failed to mount device '${DEVICE}' at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
            fi
            ;;
            
        *)
            CAMCONTROL_DEVICE=`echo "${DEVICE}" | grep -o "da[0-9]"`
            if (test "${CAMCONTROL_DEVICE}")
            then
                INQUIRY_RESULT=`camcontrol inquiry "${CAMCONTROL_DEVICE}" -t "${TIMEOUT}"`
            else
                __wait_for_device ${DEVICE_PATH}
            fi


            __check_already_mounted -d ${DEVICE_PATH}
            __check_already_mounted -m ${MOUNT_POINT}


            FILESYSTEM_INFO=`file -k -b -L -s ${DEVICE_PATH} | sed -E 's/label:\ \".*\"//g'`
            MOUNT_PARAMETERS=""
            MOUNT_TOOL=""

            for SFS in ${SUPPORTED_FILESYSTEMS}
            do
                FILESYSTEM_ID=`eval echo \\${${SFS}_ID}`

                if echo ${FILESYSTEM_INFO} | grep "${FILESYSTEM_ID}" > /dev/null
                then
                    MOUNT_PARAMETERS=`eval echo \\${${SFS}_MOUNT_PARAMETERS}`
                    MOUNT_TOOL=`eval echo \\${${SFS}_MOUNT_TOOL}`
                    CHECK_TOOL=`eval echo \\${${SFS}_CHECK_TOOL}`
                    break
                fi
            done

            if !(test "${MOUNT_TOOL}")
            then
                warn "Unsupported filesystem on device '${DEVICE}'."
                exit 0;
            fi

            if [ "${ATIME}" = NO ]
            then
                MOUNT_PARAMETERS="${MOUNT_PARAMETERS} -o noatime "
            fi

            if [ "${FILESYSTEM_ID}" = "FAT" ]
            then
                if (test "${USER}")
                then
                    MOUNT_PARAMETERS="${MOUNT_PARAMETERS} -u ${USER} "
                fi
            fi


            if (test "${CAMCONTROL_DEVICE}")
            then
                for KNOWN_DEVICE in ${KNOWN_DEVICES}
                do
                    KNOWN_DEVICE_ID=`eval echo \\${${KNOWN_DEVICE}_ID}`
                    if echo "${INQUIRY_RESULT}" | grep $KNOWN_DEVICE_ID > /dev/null
                    then
                        DEVICE_BLACKLISTED=`eval echo \\${${KNOWN_DEVICE}_BLACKLISTED}`
                        if (test "${DEVICE_BLACKLISTED}") && (test "${DEVICE_BLACKLISTED}" = "YES")
                        then
                            # we should skip this device
                            warn "Device '${DEVICE}' blocked by BLACKLIST option"
                            exit 0;
                        else
                            MOUNT_POINT_TMP=`eval echo \\${${KNOWN_DEVICE}_MOUNT_POINT}`
                            MOUNT_PARAMETERS_TMP=`eval echo \\${${KNOWN_DEVICE}_MOUNT_PARAMETERS}`

                            if (test "${MOUNT_POINT_TMP}")
                            then
                                MOUNT_POINT=${MOUNT_POINT_TMP}
                            fi

                            if (test "${MOUNT_PARAMETERS_TMP}")
                            then
                                MOUNT_PARAMETERS=${MOUNT_PARAMETERS_TMP}
                            fi
                        fi
                    fi
                done
            fi


            case ${FILESYSTEM_ID} in
                (NTFS) 
                    if which ${MOUNT_TOOL} 1> /dev/null 2> /dev/null # sysutils/fusefs-ntfs
                    then
                        __create_mount_point ${MOUNT_POINT}
                        __wait_for_device ${DEVICE_PATH}

                        if ${MOUNT_TOOL} ${MOUNT_PARAMETERS} ${DEVICE_PATH} ${MOUNT_POINT}
                        then
                            warn "Device '${DEVICE}' mounted at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
                        else
                            # make nested mount try because sometimes second mount works
                            if ${MOUNT_TOOL} ${MOUNT_PARAMETERS} ${DEVICE_PATH} ${MOUNT_POINT}
                            then
                                warn "Device '${DEVICE}' mounted at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
                            else
                                warn "Failed to mount device '${DEVICE}' at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
                            fi
                        fi
                    fi
                    ;;

                (*)
                    if (test "${CHECK_TOOL}")
                    then
                        ${CHECK_TOOL} "${DEVICE_PATH}"
                    fi

                    __create_mount_point ${MOUNT_POINT}
                    __wait_for_device ${DEVICE_PATH}

                    if (${MOUNT_TOOL} ${MOUNT_PARAMETERS} ${DEVICE_PATH} ${MOUNT_POINT})
                    then
                        warn "Device '${DEVICE}' mounted at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
                    else
                        warn "Failed to mount device '${DEVICE}' at '${MOUNT_POINT}', filesystem '${FILESYSTEM_ID}'"
                    fi
                    ;;
            esac
            ;;
    esac

    __remove_empty_dirs
}


automounta_detach()
{
    DEVICE_OR_MOUNT_POINT=${ARGUMENT}

    if (test "${DEVICE_OR_MOUNT_POINT}")
    then
        DEVICE=`mount | grep ${DEVICE_OR_MOUNT_POINT} | cut -f 1 -d " " | sed 's|/dev/||'`
        MOUNT_POINT=`mount | grep ${DEVICE_OR_MOUNT_POINT} | cut -f 3 -d " "`

        if !(test "${DEVICE}") || (test `echo "${DEVICE}" | wc -l` -ne 1)
        then
            warn "The parameter for '${name} detach' is ambiguous or there is no matching device."
        else
            __umount_device
            exit $?
        fi
    else
        __umount_all
        __remove_empty_dirs
        exit $?
    fi
}


##############################################################################
# Initialize parameters
##############################################################################

COMMAND=$1
ARGUMENT=$2


##############################################################################
# Run command
##############################################################################

run_rc_command "$COMMAND"

